#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Web_chat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket.io
 */

var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Global variables
 */
var users = [];
var User = function(_id){
    this.id = _id;
    this.name = "名無し";
}

/**
 * Socket.io Connection
 */

io.sockets.on('connection', function(socket){
    // make user
    users.push(new User(socket.id));
    // set user name
    socket.on('userName', function(userName){
        users.forEach(function(user){
            if(user.id == socket.id){
                if(userName == ""){
                    user.name = "名無し";
                }else{
                    user.name = userName;
                }
            }
        });
        // send users
        io.sockets.emit('users', users);
    });
    // get chat text
    socket.on('C_To_S_chatText', function(_text){
        users.forEach(function(user){
            var dt = new Date();
            var obj = {
                text: _text,
                name: user.name,
                hour: dt.getHours(),
                minute: dt.getMinutes()
            };
            if(user.id == socket.id){
                io.sockets.emit('S_To_C_chatText', obj);
            }
        });
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
